### arg parsing ###

user=""
ssh_args=""
found_args_separator=0

for arg in $@; do
	arg="$(echo $arg | tr -d ' ')"

	# set user programatically, instead of during runtime
	if [[ $arg =~ .*-u=.* ]]; then
		user="${arg:3}"
		echo "user set to \"$user\""
	fi

	# find "--" arg and set a flag marking its having been found
	if (( $found_args_separator == 0 )) && [[ $arg == "--" ]]; then
		found_args_separator=1
		continue
	fi

	# once "--" flag has been found, put the rest of the args into the command for ssh.
	if (( $found_args_separator == 1 )); then
		# put a space between the old contents of the string and the new when concatenating
		[[ ${ssh_args:0:1} != " " ]] && [ ! -z "$ssh_args" ] && ssh_args="$ssh_args $arg"
		# if the variable hasn't been assigned any value yet, don't put a space there
		[ -z "$ssh_args" ] && ssh_args="$arg"
	fi

done

### end arg parsing ###

# get current machine's local ip
local_ip="$(ip addr | grep 192.168* | xargs | cut -c6- | cut -f 1 -d ' ')"

# determine which device the user wants to connect to
user_selection="$(nmap -sn $local_ip | grep -v "Starting\|Host\|done" | cut -c22- | dmenu -l 15)"

# stop if no host is selected (I.E., user hits escape in dmenu prompt)
[ -z "$user_selection" ] && echo "no host selected. Stop." && exit 1

# parse user selection
ip_addr="$(echo $user_selection | tr -cd '[[:digit:].]')"

# determine username to connect with
[ -z $user ] && echo 'username (enter for current user):' && read name
[ ! -z $user ] && name="$user"

# default username to current user if there is no input
[ -z $name ] && name="$(whoami)"

# print command being run
echo "ssh ${name}@${ip_addr} ${ssh_args}"

# start ssh session
ssh ${name}@${ip_addr} ${ssh_args}

# vim: syntax=sh
