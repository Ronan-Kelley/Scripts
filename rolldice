#!/bin/bash

# flags
colors=0
found_sides=0
total_only=0
dnd_syntax=0
# args for math
sides=6;
perms=1;

# list of all rolls
rolls=()
totalVal=0

# help as a function, for legibility reasons
function help() {
	echo "usage: rollDice <sides> <permutations> [-n|--nocolor] [-c|--color] [-h|--help] [-t|--total-only]"
	return 0
}

# handle args
for arg in $@
do
	# check for help flag
	[ "$arg" == "-h" ] || [ "$arg" == "--help" ] && help && exit 0;
	# check for color disable flag
	[ "$arg" == "-n" ] || [ "$arg" == "--nocolor" ] && colors=0 && continue;
    # check for color enable flag
    [ "$arg" == "-c" ] || [ "$arg" == "--color" ] && colors=1 && continue;
	# check for total only flag
	[ "$arg" == "-t" ] || [ "$arg" == "--total-only" ] && total_only=1 && continue;
	# check for first numerical argument denoting side number
	[[ "$arg" =~ ^[0-9]+$ ]] && [ $found_sides -eq 0 ] && [ $dnd_syntax -eq 0 ] && sides=$arg && found_sides=1 && continue;
	# check for final numerical argument denoting permutations
	[[ "$arg" =~ ^[0-9]+$ ]] && [ $found_sides -eq 1 ] && [ $dnd_syntax -eq 0 ] && perms=$arg && continue;
	# check for and parse dnd-style roll syntax
	[[ "$arg" =~ ^[0-9]+d([0-9]+) ]] && dnd_syntax=1 && sides="$( cut -d "d" -f2 <<< "$arg" )" && perms="$( cut -d "d" -f1 <<< "$arg" )" && continue;
done

# if colors are disabled, output in default terminal font color. Otherwise, output in light blue.
[ $colors -eq 1 ] && tput setaf 80;

for (( i=0; i < $perms; i++ )); do
	# append the output of every roll to the 'rolls' array
	rolls+=($(( ( $RANDOM % $sides ) + 1 )))
	# ease-of-access variable containing the last value added to the 'rolls' array
	lastRoll=${rolls[$(( ${#rolls[*]} - 1 ))]}
	# maintain a running total of the values of each roll
	totalVal=$(( $totalVal + $lastRoll ))
	# print the value of every roll
    [ $total_only -eq 0 ] && [ $perms -gt 1 ] && echo "roll ${#rolls[*]}: $lastRoll"
done

[ $perms -gt 1 ] && echo "total: $totalVal" || echo "$totalVal"

# vim: syntax=sh
